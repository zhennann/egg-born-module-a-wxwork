{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/external \"require3\"","webpack://backend/./backend/src/common/wxworkHelper.js","webpack://backend/./backend/src/common/authProviderScenes.js","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/config/middleware/wxwork.js","webpack://backend/./backend/src/config/middleware/inWxwork.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/message.js","webpack://backend/./backend/src/common/wechatUtils.js","webpack://backend/external \"crypto\"","webpack://backend/./backend/src/controller/contacts.js","webpack://backend/./backend/src/controller/event.js","webpack://backend/./backend/src/controller/jssdk.js","webpack://backend/./backend/src/controller/authMini.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/message.js","webpack://backend/./backend/src/service/contacts.js","webpack://backend/./backend/src/service/event.js","webpack://backend/./backend/src/service/jssdk.js","webpack://backend/./backend/src/service/authMini.js","webpack://backend/./backend/src/models.js","webpack://backend/./backend/src/model/department.js","webpack://backend/./backend/src/model/member.js","webpack://backend/./backend/src/meta.js","webpack://backend/./backend/src/passport/auth.js","webpack://backend/./backend/src/passport/strategy-wxwork.js","webpack://backend/./backend/src/passport/oauth.js","webpack://backend/./backend/src/config/socketio/messageProgress.js","webpack://backend/./backend/src/config/socketio/channelApp.js"],"names":[],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA,qC;;;;;;ACAA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA;AACA;AACA;AACA,2BAA2B,mBAAO,CAAC,CAAyB;;AAE5D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA,gEAAgE,4BAA4B;AAC5F;AACA;AACA,uBAAuB;AACvB,qBAAqB;AACrB,mBAAmB;AACnB;AACA,0DAA0D,gBAAgB;AAC1E;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA,oCAAoC;AACpC;AACA;AACA,yDAAyD,mBAAmB;AAC5E;AACA;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA,0BAA0B,uEAAuE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,WAAW;AAC7D;AACA;AACA;AACA,sDAAsD,2CAA2C;AACjG;AACA;AACA;AACA,iDAAiD,8BAA8B;AAC/E;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,gCAAgC,WAAW;AAC3C;AACA;AACA,oCAAoC,WAAW;AAC/C;;AAEA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAwC;AACxE;AACA;AACA;AACA;;AAEA,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc;AACzD;AACA,SAAS;AACT;AACA,2CAA2C,cAAc;AACzD;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ,GAAG,KAAK;AAC9D;AACA,SAAS;AACT;AACA,8CAA8C,QAAQ,GAAG,KAAK;AAC9D;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,WAAW;AAC1D;AACA,SAAS;AACT;AACA,+CAA+C,WAAW;AAC1D;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,WAAW,GAAG,KAAK;AACrE;AACA,SAAS;AACT;AACA,kDAAkD,WAAW,GAAG,KAAK;AACrE;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,WAAW,GAAG,kBAAkB;AACpF;AACA,SAAS;AACT;AACA,oDAAoD,WAAW,GAAG,kBAAkB;AACpF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;;;;;;ACzRA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW,KAAK,gCAAgC;AAClE;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;ACjCA,eAAe,mBAAO,CAAC,CAAoB;AAC3C,gBAAgB,mBAAO,CAAC,CAAqB;AAC7C,eAAe,mBAAO,CAAC,CAAoB;AAC3C,oBAAoB,mBAAO,CAAC,CAAyB;;AAErD;;AAEA;AACA,iBAAiB,mBAAO,CAAC,EAAa;AACtC;AACA,mBAAmB,mBAAO,CAAC,EAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,EAAa;AACtC;AACA,eAAe,mBAAO,CAAC,EAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;;;;;;ACtLA;AACA,WAAW,mBAAO,CAAC,CAAmB;AACtC;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA,eAAe,mBAAO,CAAC,CAAwB;AAC/C,iBAAiB,mBAAO,CAAC,EAA0B;;AAEnD;AACA;AACA;AACA;;;;;;;ACNA,uBAAuB,mBAAO,CAAC,CAA8B;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;;AAEA;;;;;;;;ACrBA,uBAAuB,mBAAO,CAAC,CAA8B;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA,gBAAgB,mBAAO,CAAC,EAAyB;AACjD,gBAAgB,mBAAO,CAAC,EAAyB;AACjD,iBAAiB,mBAAO,CAAC,EAA0B;;AAEnD,cAAc,mBAAO,CAAC,EAAuB;AAC7C,cAAc,mBAAO,CAAC,EAAuB;AAC7C,iBAAiB,mBAAO,CAAC,EAA0B;;AAEnD;AACA;AACA;AACA,KAAK,oFAAoF;AACzF,KAAK,kFAAkF;AACvF,KAAK,iFAAiF;AACtF;AACA,KAAK,0FAA0F,QAAQ,gBAAgB,EAAE,EAAE;AAC3H,KAAK,2FAA2F,QAAQ,gBAAgB,EAAE,EAAE;AAC5H,KAAK,6FAA6F,QAAQ,gBAAgB,EAAE,EAAE;AAC9H,KAAK,8FAA8F,QAAQ,gBAAgB,EAAE,EAAE;AAC/H;AACA,KAAK,qEAAqE,SAAS,qCAAqC,EAAE,EAAE;AAC5H;AACA,KAAK;AACL,aAAa,QAAQ,gBAAgB,EAAE;AACvC,KAAK;;AAEL;AACA,KAAK,mFAAmF;AACxF,KAAK,wFAAwF;AAC7F;AACA,KAAK,0FAA0F,QAAQ,gBAAgB,EAAE,EAAE;;AAE3H;AACA,KAAK,6FAA6F,QAAQ,gBAAgB,EAAE,EAAE;;AAE9H;AACA;AACA;;;;;;;ACrCA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACpBA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA,oBAAoB,mBAAO,CAAC,EAA0B;;AAEtD;AACA;;AAEA;AACA,qDAAqD,UAAU;AAC/D,qDAAqD,UAAU;AAC/D,OAAO;AACP;;AAEA;AACA,oDAAoD,UAAU;AAC9D,wDAAwD,UAAU;AAClE,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iDAAiD,4CAA4C;AAC7F;AACA;AACA;AACA;AACA,OAAO;AACP,kDAAkD,4CAA4C;AAC9F;AACA;AACA,0CAA0C,qBAAqB;AAC/D;AACA;AACA,SAAS;AACT,yCAAyC,kBAAkB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,YAAY;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,4CAA4C;AACxE;AACA;AACA;AACA;AACA,OAAO;AACP,+DAA+D,oEAAoE;AACnI;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,cAAc;AACd;;AAEA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,4CAA4C,cAAc;AAC1D;AACA;AACA;AACA;AACA,OAAO;AACP,+DAA+D,oEAAoE;AACnI;AACA;AACA;AACA;AACA;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC5GA,eAAe,mBAAO,CAAC,EAAQ;AAC/B,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH,iBAAiB,oCAAoC;AACrD;AACA;AACA;AACA,GAAG;AACH,kBAAkB,gEAAgE;AAClF,sCAAsC,oCAAoC;AAC1E;AACA;AACA,KAAK;AACL,GAAG;AACH,YAAY,uDAAuD;AACnE,gCAAgC,4BAA4B;AAC5D,GAAG;AACH;;;;;;;AC1BA,mC;;;;;;ACAA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,wBAAwB,aAAa;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;;;;;;AC5CA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;ACbA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;ACnBA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;ACbA,gBAAgB,mBAAO,CAAC,EAAsB;AAC9C,gBAAgB,mBAAO,CAAC,EAAsB;AAC9C,iBAAiB,mBAAO,CAAC,EAAuB;AAChD,cAAc,mBAAO,CAAC,EAAoB;AAC1C,cAAc,mBAAO,CAAC,EAAoB;AAC1C,iBAAiB,mBAAO,CAAC,EAAuB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjBA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,uCAAuC;AAClD;AACA,uDAAuD,gBAAgB;AACvE;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACpFA;AACA;AACA;;AAEA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC7DA,uBAAuB,mBAAO,CAAC,CAA2B;;AAE1D;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,2BAA2B;AAChD;AACA,0CAA0C,qBAAqB;AAC/D,OAAO;AACP,sCAAsC,qBAAqB;AAC3D;AACA;;AAEA,8BAA8B,UAAU;AACxC;AACA,kDAAkD,UAAU;AAC5D,OAAO;AACP,8CAA8C,UAAU;AACxD;AACA;;AAEA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,aAAa;AAC1D;AACA;AACA,OAAO;AACP;AACA,6CAA6C,oCAAoC;AACjF,OAAO;AACP,6CAA6C,oCAAoC;AACjF;AACA;AACA;AACA;;AAEA,qCAAqC,UAAU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,kBAAkB;AAC3D,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB,mCAAmC,gBAAgB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qCAAqC;AAC9E,OAAO;AACP,yCAAyC,4BAA4B;AACrE;AACA;;AAEA;AACA,iCAAiC,qBAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gCAAgC,8BAA8B,OAAO;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gCAAgC,kCAAkC,IAAI,iCAAiC,OAAO;AACnJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,4BAA4B;AACvE;AACA;AACA;AACA;AACA;AACA,iDAAiD,oCAAoC;AACrF;AACA,yCAAyC,8BAA8B,+BAA+B,GAAG;AACzG;AACA;AACA;AACA;AACA;AACA,qCAAqC,gCAAgC,gCAAgC,OAAO;AAC5G,OAAO;AACP;AACA,qCAAqC,uCAAuC;AAC5E;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,qBAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gCAAgC,8BAA8B,OAAO;AAC1G;AACA,oEAAoE,wBAAwB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gCAAgC,8BAA8B,IAAI,6BAA6B,OAAO;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wBAAwB;AAC/D;AACA;AACA;AACA;AACA;AACA,6CAA6C,4BAA4B;AACzE;AACA,yCAAyC,8BAA8B,iBAAiB,GAAG;AAC3F;AACA;AACA;AACA,qCAAqC,gCAAgC,gCAAgC,OAAO;AAC5G,OAAO;AACP;AACA,qCAAqC,uCAAuC;AAC5E;AACA;AACA;AACA;;AAEA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B;AACA;AACA,kBAAkB,eAAe,YAAY,mBAAmB;AAChE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,gCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,aAAa;AAC1D;AACA,qCAAqC,8BAA8B,0BAA0B,GAAG;AAChG;AACA;AACA;AACA;AACA,2CAA2C,8BAA8B;AACzE;AACA;AACA,mCAAmC;AACnC;AACA;;AAEA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA,qCAAqC,8BAA8B,YAAY,GAAG;AAClF;AACA;AACA;AACA;AACA,uCAAuC,sBAAsB;AAC7D;AACA;AACA,+BAA+B;AAC/B;AACA;;AAEA,oCAAoC,8BAA8B;AAClE;AACA;AACA,+DAA+D,wCAAwC;AACvG;AACA;AACA;AACA;AACA;AACA,uCAAuC,8CAA8C;AACrF;AACA,8CAA8C,yBAAyB;AACvE;;AAEA,gCAAgC,sBAAsB;AACtD;AACA;AACA,uDAAuD,4BAA4B;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA,0CAA0C,qBAAqB;AAC/D;;AAEA,oCAAoC,8BAA8B;AAClE;AACA;AACA,+DAA+D,wCAAwC;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sCAAsC;AACvD,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,6CAA6C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0CAA0C;AAC1E;AACA,mCAAmC,6CAA6C;AAChF;;AAEA,gCAAgC,sBAAsB;AACtD;AACA;AACA,uDAAuD,4BAA4B;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0CAA0C,wCAAwC;AAClF;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,aAAa;AACjD;AACA,0DAA0D,8CAA8C;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,aAAa;AAC5B,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,wBAAwB;AACjD;AACA;AACA,6DAA6D,eAAe;AAC5E;AACA;AACA;AACA;AACA,8CAA8C,iCAAiC;AAC/E;AACA;;AAEA,4BAA4B,wBAAwB;AACpD;AACA;AACA,6DAA6D,eAAe;AAC5E;AACA;AACA;AACA;AACA,iDAAiD,iCAAiC;AAClF;AACA;;AAEA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA,4DAA4D,4CAA4C;AACxG;;AAEA;AACA;AACA,kCAAkC,sDAAsD;AACxF;AACA;;AAEA;AACA;AACA,0CAA0C,yBAAyB;AACnE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA,8DAA8D,eAAe;AAC7E;AACA,2CAA2C,wBAAwB;AACnE;;AAEA;AACA;AACA,0DAA0D,0DAA0D;AACpH,oDAAoD,oFAAoF;AACxI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC5eA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;;AAEA;;AAEA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;;;;;;AC1BA;;AAEA;;AAEA,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,MAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACjCA,uBAAuB,mBAAO,CAAC,CAA2B;;AAE1D;;AAEA;;AAEA,iBAAiB,cAAc;AAC/B;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,yCAAyC,qBAAqB,MAAM,aAAa;AACjF;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACzBA,mBAAmB,mBAAO,CAAC,EAAuB;AAClD,eAAe,mBAAO,CAAC,EAAmB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTA;AACA;AACA;AACA,kBAAkB,uCAAuC,uBAAuB,EAAE;AAClF;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,mCAAmC,wBAAwB,EAAE;AAC/E;AACA;AACA;AACA;;;;;;;ACPA,eAAe,mBAAO,CAAC,EAAoB;;AAE3C;AACA;AACA;AACA,kCAAkC,mBAAO,CAAC,EAAsC;AAChF,6BAA6B,mBAAO,CAAC,EAAiC;AACtE;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA,OAAO;AACP,kBAAkB;AAClB;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;;;;;;;ACzDA,iBAAiB,mBAAO,CAAC,EAAsB;AAC/C,uBAAuB,mBAAO,CAAC,CAA2B;AAC1D,2BAA2B,mBAAO,CAAC,CAAiC;;AAEpE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,kBAAkB;AAClB,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe,sBAAsB,wBAAwB,EAAE;AAC/D,aAAa;AACb,WAAW;AACX;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;;AAEA;AACA;AACA;;;;;;;AC1FA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA;AACA,cAAc,mBAAO,CAAC,EAAY;;AAElC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC9GA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;;;;;;ACVA,uBAAuB,mBAAO,CAAC,CAA8B;;AAE7D;AACA;AACA,yBAAyB,eAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"require3\");","const require3 = require('require3');\nconst bb = require3('bluebird');\nconst extend = require3('extend2');\nconst WxworkAPI = require3('@zhennann/co-wxwork-api');\nconst WechatAPI = require3('@zhennann/co-wechat-api');\nconst authProviderScenes = require('./authProviderScenes.js');\n\nmodule.exports = function(ctx) {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class WxworkHelper {\n\n    getSceneInfo(scene) {\n      return authProviderScenes.getScene(scene);\n    }\n\n    createWxworkApi() {\n      const self = this;\n      return new Proxy({}, {\n        get(obj, prop) {\n          if (obj[prop]) return obj[prop];\n          if (prop === 'app') {\n            // app\n            obj[prop] = new Proxy({}, {\n              get(obj, prop) {\n                if (!obj[prop]) {\n                  if (prop === 'mini') {\n                    // app.mini\n                    obj[prop] = new Proxy({}, {\n                      get(obj, prop) {\n                        if (!obj[prop]) {\n                          obj[prop] = self._createWxworkApiApp({ appName: prop, mini: true });\n                        }\n                        return obj[prop];\n                      },\n                    });\n                  } else {\n                    // others\n                    obj[prop] = self._createWxworkApiApp({ appName: prop });\n                  }\n                }\n                return obj[prop];\n              },\n            });\n          } else if (prop === 'mini') {\n            // mini\n            obj[prop] = new Proxy({}, {\n              get(obj, prop) {\n                if (!obj[prop]) {\n                  obj[prop] = self._createWxworkApiMini({ sceneShort: prop });\n                }\n                return obj[prop];\n              },\n            });\n          } else if (prop === 'util') {\n            // util\n            obj[prop] = self._createWxworkApiUtil();\n          }\n          return obj[prop];\n        },\n      });\n    }\n\n    // scene: wxwork/wxworkweb/wxworkmini\n    async verifyAuthUser({ scene, memberId, member, cbVerify, state = 'login', needLogin = true }) {\n      if (state === 'associate') {\n        // not allowed associate\n        return ctx.throw(403);\n      }\n      // userInfo(member)\n      if (!member) {\n        member = await this._getMemberByMemberId({ memberId });\n        if (!member) return ctx.throw(403);\n      }\n      // ensure auth user\n      const profileUser = await this._ensureAuthUser({ scene, memberId: member.memberId, member });\n      // verify\n      let verifyUser;\n      if (!cbVerify) {\n        verifyUser = await ctx.meta.user.verify({ state: 'login', profileUser });\n        if (needLogin) {\n          await ctx.login(verifyUser);\n        }\n      } else {\n        verifyUser = await bb.fromCallback(cb => {\n          cbVerify(profileUser, cb);\n        });\n      }\n      // ok\n      return verifyUser;\n    }\n\n    async _getMemberByMemberId({ memberId }) {\n      // model member\n      const modelMember = ctx.model.module(moduleInfo.relativeName).member;\n      return await modelMember.get({ memberId });\n    }\n\n    // profileId: wxwork:memberId\n    async _ensureAuthUser({ scene, memberId, member }) {\n      // model auth\n      const modelAuth = ctx.model.module('a-base').auth;\n      //\n      const sceneInfo = this.getSceneInfo(scene);\n      const profileId = `wxwork:${memberId}`;\n      const profileUser = {\n        module: moduleInfo.relativeName,\n        provider: sceneInfo.authProvider,\n        profileId,\n        profile: {\n          userName: member.alias || member.name,\n          realName: member.name,\n          avatar: member.avatar,\n          email: member.email,\n          mobile: member.mobile,\n          emailConfirmed: true,\n          mobileVerified: true,\n          profile: member,\n        },\n      };\n      // provider\n      const providerItem = await ctx.meta.user.getAuthProvider({\n        module: moduleInfo.relativeName,\n        providerName: sceneInfo.authProvider,\n      });\n      // check auth\n      let authId;\n      let authUserId;\n      const authItems = await ctx.model.query(\n        'select * from aAuth a where a.deleted=0 and a.iid=? and a.providerId=? and a.profileId=?',\n        [ ctx.instance.id, providerItem.id, profileId ]\n      );\n      const authItem = authItems[0];\n      if (!authItem) {\n        // always set avatar empty\n        const _profile = extend(true, {}, profileUser.profile);\n        delete _profile.avatar;\n        // insert auth\n        const res = await modelAuth.insert({\n          providerId: providerItem.id,\n          profileId,\n          profile: JSON.stringify(_profile),\n        });\n        authId = res.insertId;\n      } else {\n        // hold old avatar empty\n        const _profile = extend(true, {}, profileUser.profile);\n        const _profileOld = JSON.parse(authItem.profile);\n        _profile.avatar = _profileOld.avatar;\n        // always update\n        await modelAuth.update({\n          id: authItem.id,\n          profile: JSON.stringify(_profile),\n        });\n        authId = authItem.id;\n        authUserId = authItem.userId;\n      }\n      // check if has userId for memberId\n      const _authOthers = await ctx.model.query(\n        'select * from aAuth a where a.deleted=0 and a.iid=? and a.profileId=? and a.id<>?',\n        [ ctx.instance.id, profileId, authId ]\n      );\n      const _authOther = _authOthers[0];\n      if (_authOther && _authOther.userId !== authUserId) {\n        // update userId for this auth\n        await modelAuth.update({ id: authId, userId: _authOther.userId });\n      }\n      // ready\n      return profileUser;\n    }\n\n    _createWxworkApiApp({ appName, mini }) {\n      // config\n      const config = ctx.config.module(moduleInfo.relativeName).account.wxwork;\n      const configApp = mini ? config.minis[appName] : config.apps[appName];\n      // api\n      const api = new WxworkAPI.CorpAPI(config.corpid, configApp.secret,\n        async function() {\n          const cacheKey = `wxwork-token:${appName || ''}`;\n          return await ctx.cache.db.module(moduleInfo.relativeName).get(cacheKey);\n        },\n        async function(token) {\n          const cacheKey = `wxwork-token:${appName || ''}`;\n          if (token) {\n            await ctx.cache.db.module(moduleInfo.relativeName).set(cacheKey, token, token.expireTime - Date.now());\n          } else {\n            await ctx.cache.db.module(moduleInfo.relativeName).remove(cacheKey);\n          }\n        }\n      );\n      // registerTicketHandle\n      api.registerTicketHandle(\n        async function(type) {\n          const cacheKey = `wxwork-jsticket:${appName}:${type}`;\n          return await ctx.cache.db.module(moduleInfo.relativeName).get(cacheKey);\n        },\n        async function(type, token) {\n          const cacheKey = `wxwork-jsticket:${appName}:${type}`;\n          if (token) {\n            await ctx.cache.db.module(moduleInfo.relativeName).set(cacheKey, token, token.expireTime - Date.now());\n          } else {\n            await ctx.cache.db.module(moduleInfo.relativeName).remove(cacheKey);\n          }\n        }\n      );\n      // ready\n      return api;\n    }\n\n    _createWxworkApiMini({ sceneShort }) {\n      // config\n      const config = ctx.config.module(moduleInfo.relativeName).account.wxwork;\n      const configMini = config.minis[sceneShort];\n      // api\n      const api = new WechatAPI(configMini.appID, configMini.appSecret,\n        async function() {\n          const cacheKey = `wxworkmini-token:${sceneShort}`;\n          return await ctx.cache.db.module(moduleInfo.relativeName).get(cacheKey);\n        },\n        async function(token) {\n          const cacheKey = `wxworkmini-token:${sceneShort}`;\n          if (token) {\n            await ctx.cache.db.module(moduleInfo.relativeName).set(cacheKey, token, token.expireTime - Date.now());\n          } else {\n            await ctx.cache.db.module(moduleInfo.relativeName).remove(cacheKey);\n          }\n        }\n      );\n      // registerTicketHandle\n      api.registerTicketHandle(\n        async function(type) {\n          const cacheKey = `wxworkmini-jsticket:${sceneShort}:${type}`;\n          return await ctx.cache.db.module(moduleInfo.relativeName).get(cacheKey);\n        },\n        async function(type, token) {\n          const cacheKey = `wxworkmini-jsticket:${sceneShort}:${type}`;\n          if (token) {\n            await ctx.cache.db.module(moduleInfo.relativeName).set(cacheKey, token, token.expireTime - Date.now());\n          } else {\n            await ctx.cache.db.module(moduleInfo.relativeName).remove(cacheKey);\n          }\n        }\n      );\n      // registerSessionKeyHandle\n      api.registerSessionKeyHandle(\n        async function() {\n          const cacheKey = `wxworkmini-sessionKey:${sceneShort}:${ctx.user.agent.id}`;\n          return await ctx.cache.db.module(moduleInfo.relativeName).get(cacheKey);\n        },\n        async function(sessionKey) {\n          const cacheKey = `wxworkmini-sessionKey:${sceneShort}:${ctx.user.agent.id}`;\n          await ctx.cache.db.module(moduleInfo.relativeName).set(cacheKey, sessionKey);\n        }\n      );\n      // ready\n      return api;\n    }\n\n    _createWxworkApiUtil() {\n      return {\n        // scene: empty/wxwork/wxworkweb/wxworkmini/wxworkminidefault/xxx,xxx,xxx\n        in(scene) {\n          // scene\n          if (!scene) scene = 'wxwork';\n          if (typeof scene === 'string') scene = scene.split(',');\n          // provider\n          const provider = ctx.user && ctx.user.provider;\n          if (!provider || provider.module !== moduleInfo.relativeName) return false;\n          // find any match\n          for (const item of scene) {\n            const ok = (provider.providerName === item) || (item === 'wxworkmini' && provider.providerName.indexOf(item) > -1);\n            if (ok) return true;\n          }\n          // not found\n          return false;\n        },\n      };\n    }\n\n  }\n\n  return WxworkHelper;\n};\n","const _scenes = {\n  wxwork: {\n    scene: 'wxwork', authProvider: 'wxwork', title: 'Wechat Work', client: 'wxwork',\n  },\n  wxworkweb: {\n    scene: 'wxworkweb', authProvider: 'wxworkweb', title: 'Wechat Work Web', client: 'wxworkweb',\n  },\n  wxworkmini: {\n    scene: 'wxworkmini', authProvider: 'wxworkmini', title: 'Wechat Work Miniprogram',\n  },\n};\n\nfunction _upperCaseFirstChar(str) {\n  if (!str) return '';\n  return str.substring(0, 1).toUpperCase() + str.substring(1);\n}\n\nmodule.exports = {\n  scenes: _scenes,\n  getScene(scene) {\n    if (scene.indexOf('wxworkmini') > -1) {\n      const sceneShort = scene.substr('wxworkmini'.length);\n      // wxworkmini\n      const base = _scenes.wxworkmini;\n      return {\n        scene,\n        authProvider: scene,\n        title: `${base.title} - ${_upperCaseFirstChar(sceneShort)}`,\n      };\n    }\n    // else\n    return _scenes[scene];\n  },\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\n\nmodule.exports = app => {\n\n  // routes\n  const routes = require('./routes.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    routes,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    middlewares,\n    meta,\n  };\n\n};\n","\nconst jsApiList = [\n  'checkJsApi',\n  'agentConfig',\n  'onMenuShareWechat',\n  // 'onMenuShareTimeline',\n  // 'onMenuShareAppMessage',\n  'startRecord',\n  'stopRecord',\n  'onVoiceRecordEnd',\n  'playVoice',\n  'pauseVoice',\n  'stopVoice',\n  'onVoicePlayEnd',\n  'uploadVoice',\n  'downloadVoice',\n  'chooseImage',\n  'previewImage',\n  'uploadImage',\n  'downloadImage',\n  'getLocalImgData',\n  'getNetworkType',\n  'onNetworkStatusChange',\n  'openLocation',\n  'getLocation',\n  'startAutoLBS',\n  'stopAutoLBS',\n  'onLocationChange',\n  'onHistoryBack',\n  'hideOptionMenu',\n  'showOptionMenu',\n  'hideMenuItems',\n  'showMenuItems',\n  'hideAllNonBaseMenuItem',\n  'showAllNonBaseMenuItem',\n  'closeWindow',\n  'openDefaultBrowser',\n  'scanQRCode',\n  'selectEnterpriseContact',\n  'openEnterpriseChat',\n  'chooseInvoice',\n  'selectExternalContact',\n  'getCurExternalContact',\n  'openUserProfile',\n  'shareAppMessage',\n  'shareWechatMessage',\n  'startWifi',\n  'stopWifi',\n  'connectWifi',\n  'getWifiList',\n  'onGetWifiList',\n  'onWifiConnected',\n  'getConnectedWifi',\n  'setClipboardData',\n];\n\nconst jsApiListAgent = [\n  'onMenuShareWechat',\n  // 'onMenuShareTimeline',\n  // 'onMenuShareAppMessage',\n  'startRecord',\n  'stopRecord',\n  'onVoiceRecordEnd',\n  'playVoice',\n  'pauseVoice',\n  'stopVoice',\n  'onVoicePlayEnd',\n  'uploadVoice',\n  'downloadVoice',\n  'chooseImage',\n  'previewImage',\n  'uploadImage',\n  'downloadImage',\n  'getLocalImgData',\n  'getNetworkType',\n  'onNetworkStatusChange',\n  'openLocation',\n  'getLocation',\n  'startAutoLBS',\n  'stopAutoLBS',\n  'onLocationChange',\n  'onHistoryBack',\n  'hideOptionMenu',\n  'showOptionMenu',\n  'hideMenuItems',\n  'showMenuItems',\n  'hideAllNonBaseMenuItem',\n  'showAllNonBaseMenuItem',\n  'closeWindow',\n  'openDefaultBrowser',\n  'scanQRCode',\n  'selectEnterpriseContact',\n  'openEnterpriseChat',\n  'chooseInvoice',\n  'selectExternalContact',\n  'getCurExternalContact',\n  'openUserProfile',\n  'shareAppMessage',\n  'shareWechatMessage',\n  'startWifi',\n  'stopWifi',\n  'connectWifi',\n  'getWifiList',\n  'onGetWifiList',\n  'onWifiConnected',\n  'getConnectedWifi',\n  'setClipboardData',\n];\n\nmodule.exports = appInfo => {\n  const config = {};\n\n  // queues\n  config.queues = {\n    contacts: {\n      path: 'contacts/queue',\n    },\n  };\n\n  // middlewares\n  config.middlewares = {\n    wxwork: {\n      global: false,\n      dependencies: 'instance',\n    },\n    inWxwork: {\n      global: false,\n      dependencies: 'instance',\n    },\n  };\n\n  // sync\n  config.sync = {\n    department: {\n      roleContainer: 'internal',\n      roleTop: 'wxwork',\n    },\n  };\n\n  // account\n  config.account = {};\n\n  // account.wxwork\n  config.account.wxwork = {\n    corpid: '',\n    // apps\n    apps: {\n      selfBuilt: {\n        agentid: '',\n        secret: '',\n        token: appInfo.name,\n        encodingAESKey: '',\n        message: {\n          reply: {\n            default: 'You are welcome!',\n          },\n        },\n        jssdk: {\n          debug: false,\n          jsApiList,\n        },\n        jssdkAgent: {\n          jsApiList: jsApiListAgent,\n        },\n      },\n      contacts: {\n        secret: '',\n        token: appInfo.name,\n        encodingAESKey: '',\n      },\n    },\n    // minis\n    minis: {\n      default: {\n        secret: '',\n        appID: '',\n        appSecret: '',\n      },\n    },\n  };\n\n  return config;\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n  'Wechat Work': '企业微信',\n  'Wechat Work Miniprogram': '企业微信小程序',\n  'Wechat Work Miniprogram - Default': '企业微信小程序 - 默认',\n  'Wechat Work Web': '企业微信Web',\n  'Wechat Public': '微信公众号',\n  'Wechat Miniprogram': '微信小程序',\n  'Not In Wechat Work': '不在企业微信内部',\n  'Not In Wechat Work Miniprogram': '不在企业微信小程序内部',\n  'Contacts Management': '通讯录管理',\n  'Sync Started': '同步已启动',\n  'Sync Completed': '同步已完成',\n  'Department Count': '部门数量',\n  'Member Count': '成员数量',\n  'Sync Departments First': '请先同步部门',\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Not In Wechat Work',\n  1002: 'Not In Wechat Work Miniprogram',\n  1003: 'Role not Found for department: %d',\n  1004: 'Department not Found: %d',\n  1005: 'Member not Found: %d',\n  1006: 'Sync Departments First',\n};\n","const wxwork = require('./middleware/wxwork.js');\nconst inWxwork = require('./middleware/inWxwork.js');\n\nmodule.exports = {\n  wxwork,\n  inWxwork,\n};\n","const WxworkHelperFn = require('../../common/wxworkHelper.js');\nconst WXWORK = Symbol('CTX#WXWORK');\n\nmodule.exports = (options, app) => {\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  return async function wxwork(ctx, next) {\n    ctx.meta = ctx.meta || {};\n    Object.defineProperty(ctx.meta, 'wxwork', {\n      get() {\n        if (ctx.meta[WXWORK] === undefined) {\n          const wxworkHelper = new (WxworkHelperFn(ctx))();\n          ctx.meta[WXWORK] = wxworkHelper.createWxworkApi();\n        }\n        return ctx.meta[WXWORK];\n      },\n    });\n\n    // next\n    await next();\n  };\n\n};\n\n","const WxworkHelperFn = require('../../common/wxworkHelper.js');\n\nmodule.exports = (options, app) => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  return async function inWxwork(ctx, next) {\n    const wxworkHelper = new (WxworkHelperFn(ctx))();\n    const api = wxworkHelper.createWxworkApi();\n    if (!api.util.in(options.scene)) return ctx.throw.module(moduleInfo.relativeName, 1001);\n    // next\n    await next();\n  };\n};\n","const version = require('./controller/version.js');\nconst message = require('./controller/message.js');\nconst contacts = require('./controller/contacts.js');\n\nconst event = require('./controller/event.js');\nconst jssdk = require('./controller/jssdk.js');\nconst authMini = require('./controller/authMini.js');\n\nmodule.exports = app => {\n  const routes = [\n    // version\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/init', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/test', controller: version, middlewares: 'test' },\n    // message\n    { method: 'get', path: 'message/index', controller: message, middlewares: 'wxwork', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'message/index', controller: message, middlewares: 'wxwork', meta: { auth: { enable: false } } },\n    { method: 'get', path: 'message/contacts', controller: message, middlewares: 'wxwork', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'message/contacts', controller: message, middlewares: 'wxwork', meta: { auth: { enable: false } } },\n    // contacts\n    { method: 'post', path: 'contacts/sync', controller: contacts, meta: { right: { type: 'function', name: 'contacts' } } },\n    // queue\n    { method: 'post', path: 'contacts/queue', controller: contacts, middlewares: 'inner,transaction,wxwork',\n      meta: { auth: { enable: false } },\n    },\n\n    // jsapi\n    { method: 'post', path: 'jssdk/jsconfig', controller: jssdk, middlewares: 'wxwork' },\n    { method: 'post', path: 'jssdk/jsconfigAgent', controller: jssdk, middlewares: 'wxwork' },\n    // event\n    { method: 'post', path: 'event/loginInfo', controller: event, middlewares: 'inner', meta: { auth: { enable: false } } },\n\n    // authMini\n    { method: 'post', path: 'authMini/login', controller: authMini, middlewares: 'wxwork', meta: { auth: { enable: false } } },\n\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async init() {\n      await this.service.version.init(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async test() {\n      await this.service.version.test(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n","const require3 = require('require3');\nconst WechatCrypto = require3('wechat-crypto');\nconst wechatUtils = require('../common/wechatUtils.js');\n\nmodule.exports = app => {\n  class MessageController extends app.Controller {\n\n    async index() {\n      await this._handleMessage('selfBuilt', async ({ message }) => {\n        return await this.ctx.service.message.index({ message });\n      });\n    }\n\n    async contacts() {\n      await this._handleMessage('contacts', async ({ message }) => {\n        return await this.ctx.service.message.contacts({ message });\n      });\n    }\n\n    async _handleMessage(appName, handler) {\n      // query\n      const query = this.ctx.query;\n      // config\n      const config = this.ctx.config.account.wxwork;\n      const configApp = config.apps[appName];\n      // encrypted: always true\n      const encrypted = true; // query.encrypt_type === 'aes';\n      // wechat crypto\n      const wechatCrypto = encrypted ? new WechatCrypto(configApp.token, configApp.encodingAESKey, config.corpid) : null;\n      // parse\n      let messageIn;\n      if (this.ctx.method === 'GET') {\n        messageIn = await this._parseMessageGet({ query, configApp, encrypted, wechatCrypto });\n        // ok\n        this.ctx.status = 200;\n        this.ctx.type = 'text/plain';\n        this.ctx.body = messageIn.echostr;\n      } else {\n        messageIn = await this._parseMessagePost({ query, configApp, encrypted, wechatCrypto });\n        // handle\n        let resXML;\n        const messageOut = await handler({ message: messageIn });\n        if (!messageOut) {\n          resXML = '';\n        } else {\n          resXML = wechatUtils.buildXML({ xml: messageOut });\n          if (encrypted) {\n            const wrap = {};\n            wrap.Encrypt = wechatCrypto.encrypt(resXML);\n            wrap.TimeStamp = wechatUtils.createTimestamp();\n            wrap.Nonce = wechatUtils.createNonceStr();\n            wrap.MsgSignature = wechatCrypto.getSignature(wrap.TimeStamp, wrap.Nonce, wrap.Encrypt);\n            resXML = wechatUtils.buildXML({ xml: wrap });\n          }\n        }\n        // ok\n        this.ctx.status = 200;\n        this.ctx.type = 'text/xml';\n        this.ctx.body = resXML;\n      }\n    }\n\n    async _parseMessageGet({ query, configApp, encrypted, wechatCrypto }) {\n      // check if valid\n      let valid = false;\n      if (encrypted) {\n        valid = query.msg_signature === wechatCrypto.getSignature(query.timestamp, query.nonce, query.echostr);\n      } else {\n        valid = query.signature === wechatUtils.calcSignature({ options: [ configApp.token, query.timestamp, query.nonce ].sort() });\n      }\n      if (!valid) this.ctx.throw(401);\n      // decrypt\n      if (encrypted) {\n        const res = wechatCrypto.decrypt(query.echostr);\n        return { echostr: res.message };\n      }\n      return { echostr: query.echostr };\n    }\n\n    async _parseMessagePost({ query, configApp, encrypted, wechatCrypto }) {\n      // xml raw\n      let xmlRaw;\n      if (typeof this.ctx.request.body === 'string') {\n        xmlRaw = this.ctx.request.body;\n      } else {\n        const payload = await this.ctx.getPayload();\n        xmlRaw = payload.toString();\n      }\n      // parse xml\n      let xml = await wechatUtils.parseXML({ xml: xmlRaw });\n      // check if valid\n      let valid = false;\n      if (encrypted) {\n        valid = query.msg_signature === wechatCrypto.getSignature(query.timestamp, query.nonce, xml.Encrypt);\n      } else {\n        valid = query.signature === wechatUtils.calcSignature({ options: [ configApp.token, query.timestamp, query.nonce ].sort() });\n      }\n      if (!valid) this.ctx.throw(401);\n      // decrypt\n      if (encrypted) {\n        const res = wechatCrypto.decrypt(xml.Encrypt);\n        xml = await wechatUtils.parseXML({ xml: res.message });\n      }\n      return xml;\n    }\n\n  }\n  return MessageController;\n};\n\n","const crypto = require('crypto');\nconst require3 = require('require3');\nconst bb = require3('bluebird');\nconst xml2js = require3('xml2js');\n\nmodule.exports = {\n  createNonceStr() {\n    return Math.random().toString(36).substr(2, 15);\n  },\n  createTimestamp() {\n    return '' + Math.floor(Date.now() / 1000);\n  },\n  calcSignature({ options, join = '', hash = 'sha1' }) {\n    const hashsum = crypto.createHash(hash);\n    hashsum.update(options.join(join));\n    return hashsum.digest('hex');\n  },\n  async parseXML({ xml, trim = true, explicitArray = false, explicitRoot = false }) {\n    const parser = new xml2js.Parser({ trim, explicitArray, explicitRoot });\n    return await bb.fromCallback(cb => {\n      parser.parseString(xml, cb);\n    });\n  },\n  buildXML({ xml, cdata = true, headless = true, rootName = 'xml' }) {\n    return (new xml2js.Builder({ cdata, headless, rootName })).buildObject(xml);\n  },\n};\n","module.exports = require(\"crypto\");","const require3 = require('require3');\nconst uuid = require3('uuid');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class ContactsController extends app.Controller {\n\n    async sync() {\n      // progress\n      const progressId = uuid.v4().replace(/-/g, '');\n      // queue\n      this.ctx.app.meta.queue.push({\n        locale: this.ctx.locale,\n        subdomain: this.ctx.subdomain,\n        module: moduleInfo.relativeName,\n        queueName: 'contacts',\n        data: {\n          queueAction: 'sync',\n          type: this.ctx.request.body.type,\n          progressId,\n          userOp: this.ctx.user.op,\n        },\n      });\n      this.ctx.success({ progressId });\n    }\n\n    async queue() {\n      const queueAction = this.ctx.request.body.queueAction;\n      if (queueAction === 'sync') {\n        await this.service.contacts.queueSync({\n          type: this.ctx.request.body.type,\n          progressId: this.ctx.request.body.progressId,\n          userOp: this.ctx.request.body.userOp,\n        });\n      } else if (queueAction === 'changeContact') {\n        await this.service.contacts.queueChangeContact({\n          message: this.ctx.request.body.message,\n        });\n      }\n      this.ctx.success();\n    }\n\n  }\n  return ContactsController;\n};\n","module.exports = app => {\n  class EventController extends app.Controller {\n\n    async loginInfo() {\n      const res = await this.service.event.loginInfo({\n        event: this.ctx.request.body.event,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return EventController;\n};\n","module.exports = app => {\n  class JSSDKController extends app.Controller {\n\n    async jsconfig() {\n      const res = await this.service.jssdk.jsconfig({\n        url: this.ctx.request.body.url,\n      });\n      this.ctx.success(res);\n    }\n\n    async jsconfigAgent() {\n      const res = await this.service.jssdk.jsconfigAgent({\n        url: this.ctx.request.body.url,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return JSSDKController;\n};\n","module.exports = app => {\n  class AuthMiniController extends app.Controller {\n\n    async login() {\n      const res = await this.service.authMini.login({\n        scene: this.ctx.request.body.scene,\n        code: this.ctx.request.body.code,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return AuthMiniController;\n};\n","const version = require('./service/version.js');\nconst message = require('./service/message.js');\nconst contacts = require('./service/contacts.js');\nconst event = require('./service/event.js');\nconst jssdk = require('./service/jssdk.js');\nconst authMini = require('./service/authMini.js');\n\nmodule.exports = app => {\n  const services = {\n    version,\n    message,\n    contacts,\n    event,\n    jssdk,\n    authMini,\n  };\n  return services;\n};\n","module.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n      if (options.version === 1) {\n\n        let sql;\n\n        // create table: aWxworkDepartment\n        sql = `\n          CREATE TABLE aWxworkDepartment (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            roleId int(11) DEFAULT '0',\n            departmentId int(11) DEFAULT '0',\n            departmentParentId int(11) DEFAULT '0',\n            departmentName varchar(255) DEFAULT NULL,\n            departmentNameEn varchar(255) DEFAULT NULL,\n            departmentOrder int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aWxworkMember\n        sql = `\n          CREATE TABLE aWxworkMember (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            userId int(11) DEFAULT '0',\n            memberId varchar(255) DEFAULT NULL,\n            name varchar(255) DEFAULT NULL,\n            alias varchar(255) DEFAULT NULL,\n            mobile varchar(255) DEFAULT NULL,\n            department varchar(255) DEFAULT NULL,\n            sorting varchar(255) DEFAULT NULL,\n            position varchar(255) DEFAULT NULL,\n            gender int(11) DEFAULT '0',\n            email varchar(255) DEFAULT NULL,\n            telephone varchar(255) DEFAULT NULL,\n            is_leader_in_dept varchar(255) DEFAULT NULL,\n            avatar varchar(255) DEFAULT NULL,\n            thumb_avatar varchar(255) DEFAULT NULL,\n            qr_code varchar(255) DEFAULT NULL,\n            status int(11) DEFAULT '0',\n            extattr JSON DEFAULT NULL,\n            external_profile JSON DEFAULT NULL,\n            external_position varchar(255) DEFAULT NULL,\n            address varchar(255) DEFAULT NULL,\n            hide_mobile int(11) DEFAULT '0',\n            english_name varchar(255) DEFAULT NULL,\n            open_userid varchar(255) DEFAULT NULL,\n            main_department int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // roleFunctions\n        const roleFunctions = [\n          { roleName: 'system', name: 'contacts' },\n        ];\n        await this.ctx.meta.role.addRoleFunctionBatch({ roleFunctions });\n      }\n    }\n\n    async test() {\n    }\n\n  }\n\n  return Version;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Message extends app.Service {\n\n    async index({ message }) {\n      // config\n      const config = this.ctx.config.account.wxwork;\n      const configAppSelfBuilt = config.apps.selfBuilt;\n      // res\n      let res;\n      // event: subscribe\n      if (message.MsgType === 'event') {\n        if (message.Event === 'subscribe') {\n          // donothing，具体逻辑在通讯录回调通知中实现\n          return null;\n        } else if (message.Event === 'unsubscribe') {\n          // donothing，具体逻辑在通讯录回调通知中实现\n          return null;\n        }\n      }\n      // raise event\n      const res2 = await this.ctx.meta.event.invoke({\n        module: moduleInfo.relativeName,\n        name: 'wxworkMessage',\n        data: { message },\n      });\n      if (res2) res = res2;\n      // check if ready\n      if (res) return res;\n      // default reply\n      if (message.MsgType !== 'event') {\n        return {\n          ToUserName: message.FromUserName,\n          FromUserName: message.ToUserName,\n          CreateTime: new Date().getTime(),\n          MsgType: 'text',\n          Content: configAppSelfBuilt.message.reply.default,\n        };\n      }\n      return null;\n    }\n\n    async contacts({ message }) {\n      // queue\n      this.ctx.app.meta.queue.push({\n        locale: this.ctx.locale,\n        subdomain: this.ctx.subdomain,\n        module: moduleInfo.relativeName,\n        queueName: 'contacts',\n        data: {\n          queueAction: 'changeContact',\n          message,\n        },\n      });\n      // ok\n      return null;\n    }\n\n  }\n\n  return Message;\n};\n","const WxworkHelperFn = require('../common/wxworkHelper.js');\n\n// department\n\nconst __departmentFieldMap = [\n  [ 'departmentId', 'departmentParentId', 'departmentName', 'departmentNameEn', 'departmentOrder' ],\n  [ 'id', 'parentid', 'name', 'name_en', 'order' ],\n  [ 'number', 'number', 'string', 'string', 'number' ],\n];\n\nconst __departmentFieldMap_XML = [\n  [ 'departmentId', 'departmentParentId', 'departmentName', 'departmentOrder' ],\n  [ 'Id', 'ParentId', 'Name', 'Order' ],\n  [ 'number', 'number', 'string', 'number' ],\n];\n\n// member\n\nconst __memberFieldMap = [\n  [ 'memberId', 'name', 'alias', 'mobile', 'department', 'sorting', 'position', 'gender', 'email', 'telephone', 'is_leader_in_dept', 'avatar', 'thumb_avatar', 'qr_code', 'status', 'extattr', 'external_profile', 'external_position', 'address', 'hide_mobile', 'english_name', 'open_userid', 'main_department' ],\n  [ 'userid', 'name', 'alias', 'mobile', 'department', 'order', 'position', 'gender', 'email', 'telephone', 'is_leader_in_dept', 'avatar', 'thumb_avatar', 'qr_code', 'status', 'extattr', 'external_profile', 'external_position', 'address', 'hide_mobile', 'english_name', 'open_userid', 'main_department' ],\n  [ 'string', 'string', 'string', 'string', 'array', 'array', 'string', 'number', 'string', 'string', 'array', 'string', 'string', 'string', 'number', 'json', 'json', 'string', 'string', 'number', 'string', 'string', 'number' ],\n];\n\nconst __memberFieldMap_XML = [\n  [ 'memberIdNew', 'memberId', 'name', 'alias', 'mobile', 'department', 'position', 'gender', 'email', 'telephone', 'is_leader_in_dept', 'avatar', 'status', 'extattr', 'address' ],\n  [ 'NewUserID', 'UserID', 'Name', 'Alias', 'Mobile', 'Department', 'Position', 'Gender', 'Email', 'Telephone', 'IsLeaderInDept', 'Avatar', 'Status', 'ExtAttr', 'Address' ],\n  [ 'string', 'string', 'string', 'string', 'string', 'string', 'string', 'number', 'string', 'string', 'string', 'string', 'number', 'json', 'string' ],\n];\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Contacts extends app.Service {\n\n    async queueSync({ type, progressId, userOp }) {\n      if (type === 'departments') {\n        await this._queueSyncDepartments({ progressId, userOp });\n      } else if (type === 'members') {\n        await this._queueSyncMembers({ progressId, userOp });\n      }\n    }\n\n    async queueChangeContact({ message }) {\n      if (message.ChangeType.indexOf('_party') > -1) {\n        await this._queueChangeContactDepartment({ message });\n      } else if (message.ChangeType.indexOf('_user') > -1) {\n        await this._queueChangeContactMember({ message });\n      }\n    }\n\n    async _queueChangeContactDepartment({ message }) {\n      // department\n      const department = {};\n      this._adjustFields(department, message, __departmentFieldMap_XML);\n      // do\n      if (message.ChangeType === 'create_party') {\n        // create\n        await this._createRoleAndDepartment({ department });\n        // build roles\n        await this.ctx.meta.role.build();\n      } else if (message.ChangeType === 'update_party') {\n        // update\n        await this._updateRoleAndDepartment({ localDepartment: null, department });\n      } else if (message.ChangeType === 'delete_party') {\n        await this._deleteRoleAndDepartment({ localDepartment: null, department });\n        // build roles\n        await this.ctx.meta.role.build();\n      }\n    }\n\n    async _queueChangeContactMember({ message }) {\n      const member = {};\n      this._adjustFields(member, message, __memberFieldMap_XML);\n      // do\n      if (message.ChangeType === 'create_user') {\n        // get member remotely\n        const res = await this.ctx.meta.wxwork.app.contacts.getUser(member.memberId);\n        if (res.errcode) {\n          throw new Error(res.errmsg);\n        }\n        // create\n        const _member = {};\n        this._adjustFields(_member, res, __memberFieldMap);\n        await this._createUserAndMember({ member: _member });\n      } else if (message.ChangeType === 'update_user') {\n        // check if memberId changed\n        if (member.memberIdNew) {\n          // upate memberId of member\n          await this.ctx.model.query(\n            'update aWxworkUser a set a.memberId=? where a.iid=? and a.memberId=?',\n            [ member.memberIdNew, this.ctx.instance.id, member.memberId ]\n          );\n          // upate profileId of auth\n          await this.ctx.model.query(\n            'update aAuth a set a.profileId=? where a.iid=? and a.profileId=?',\n            [ `wxwork:${member.memberIdNew}`, this.ctx.instance.id, `wxwork:${member.memberId}` ]\n          );\n        }\n        // get member remotely\n        const res = await this.ctx.meta.wxwork.app.contacts.getUser(member.memberIdNew || member.memberId);\n        if (res.errcode) {\n          throw new Error(res.errmsg);\n        }\n        // update\n        const _member = {};\n        this._adjustFields(_member, res, __memberFieldMap);\n        await this._updateUserAndMember({ localMember: null, member: _member });\n      } else if (message.ChangeType === 'delete_user') {\n        await this._deleteUserAndMember({ localMember: null, member });\n      }\n    }\n\n    // queue sync departments\n    async _queueSyncDepartments({ progressId, userOp }) {\n      // prepare context\n      const context = {\n        remoteDepartments: null,\n        progressId,\n        userOp,\n      };\n      try {\n        // progress\n        await this._progressPublish({ context, done: 0, text: `--- ${this.ctx.text('Sync Started')} ---` });\n        // remote departments\n        const res = await this.ctx.meta.wxwork.app.contacts.getDepartmentList();\n        if (res.errcode) {\n          throw new Error(res.errmsg);\n        }\n        context.remoteDepartments = res.department;\n        // progress\n        await this._progressPublish({ context, done: 0, text: `--- ${this.ctx.text('Department Count')}: ${context.remoteDepartments.length} ---` });\n        // local departments\n        context.localDepartments = await this.ctx.model.department.select();\n        context.localDepartmentsMap = {};\n        for (const localDepartment of context.localDepartments) {\n          localDepartment.__status = 0;\n          context.localDepartmentsMap[localDepartment.departmentId] = localDepartment;\n        }\n        // loop create/update\n        for (const remoteDepartment of context.remoteDepartments) {\n          await this._queueSyncDepartment({ context, remoteDepartment });\n        }\n        // delete __status===0\n        for (const departmentId in context.localDepartmentsMap) {\n          const localDepartment = context.localDepartmentsMap[departmentId];\n          if (localDepartment.__status === 0) {\n            await this._deleteRoleAndDepartment({ localDepartment, department: null });\n            // progress\n            await this._progressPublish({ context, done: 0, text: `- ${localDepartment.departmentName}` });\n          }\n        }\n        // build roles\n        await this.ctx.meta.role.build();\n        // progress done\n        await this._progressPublish({ context, done: 1, text: `--- ${this.ctx.text('Sync Completed')} ---` });\n      } catch (err) {\n        // progress error\n        await this._progressPublish({ context, done: -1, text: err.message });\n        // throw err\n        throw err;\n      }\n    }\n\n    // queue sync members\n    async _queueSyncMembers({ progressId, userOp }) {\n      // prepare context\n      const context = {\n        remoteMembers: null,\n        progressId,\n        userOp,\n      };\n      try {\n        // progress\n        await this._progressPublish({ context, done: 0, text: `--- ${this.ctx.text('Sync Started')} ---` });\n        // remote members\n        const departmentRoot = await this.ctx.model.department.get({ departmentParentId: 0 });\n        if (!departmentRoot) return this.ctx.throw(1006);\n        const res = await this.ctx.meta.wxwork.app.contacts.getDepartmentUserList(departmentRoot.departmentId, 1);\n        if (res.errcode) {\n          throw new Error(res.errmsg);\n        }\n        context.remoteMembers = res.userlist;\n        // progress\n        await this._progressPublish({ context, done: 0, text: `--- ${this.ctx.text('Member Count')}: ${context.remoteMembers.length} ---` });\n        // local members\n        context.localMembers = await this.ctx.model.member.select();\n        context.localMembersMap = {};\n        for (const localMember of context.localMembers) {\n          localMember.__status = 0;\n          context.localMembersMap[localMember.memberId] = localMember;\n        }\n        // loop create/update\n        for (const remoteMember of context.remoteMembers) {\n          await this._queueSyncMember({ context, remoteMember });\n        }\n        // delete __status===0\n        for (const memberId in context.localMembersMap) {\n          const localMember = context.localMembersMap[memberId];\n          if (localMember.__status === 0) {\n            await this._deleteUserAndMember({ localMember, member: null });\n            // progress\n            await this._progressPublish({ context, done: 0, text: `- ${localMember.name}` });\n          }\n        }\n        // progress done\n        await this._progressPublish({ context, done: 1, text: `--- ${this.ctx.text('Sync Completed')} ---` });\n      } catch (err) {\n        // progress error\n        await this._progressPublish({ context, done: -1, text: err.message });\n        // throw err\n        throw err;\n      }\n    }\n\n    async _progressPublish({ context, done, text }) {\n      const ioMessage = {\n        userIdTo: context.userOp.id,\n        messageFilter: context.progressId,\n        content: { done, text },\n      };\n      await this.ctx.meta.io.publish({\n        path: `/${moduleInfo.url}/progress/${context.progressId}`,\n        message: ioMessage,\n        messageClass: {\n          module: moduleInfo.relativeName,\n          messageClassName: 'progress',\n        },\n        options: {\n          saveMessageAsync: true,\n        },\n      });\n    }\n\n    async _queueSyncDepartment({ context, remoteDepartment }) {\n      const department = {};\n      this._adjustFields(department, remoteDepartment, __departmentFieldMap);\n      const departmentId = department.departmentId;\n      // check if local department exists\n      const localDepartment = context.localDepartmentsMap[departmentId];\n      // new department\n      if (!localDepartment) {\n        await this._createRoleAndDepartment({ department });\n        // progress\n        await this._progressPublish({ context, done: 0, text: `+ ${department.departmentName}` });\n        // done\n        return;\n      }\n      // update\n      await this._updateRoleAndDepartment({ localDepartment, department });\n      // progress: not prompt\n      // done\n      localDepartment.__status = 1; // handled\n      return;\n    }\n\n    async _queueSyncMember({ context, remoteMember }) {\n      const member = {};\n      this._adjustFields(member, remoteMember, __memberFieldMap);\n      const memberId = member.memberId;\n      // check if local member exists\n      const localMember = context.localMembersMap[memberId];\n      // new member\n      if (!localMember) {\n        await this._createUserAndMember({ member });\n        // progress\n        await this._progressPublish({ context, done: 0, text: `+ ${member.name}` });\n        // done\n        return;\n      }\n      // update\n      await this._updateUserAndMember({ localMember, member });\n      // progress: not prompt\n      // done\n      localMember.__status = 1; // handled\n      return;\n    }\n\n    async _deleteRoleAndDepartment({ localDepartment, department }) {\n      // localDepartment\n      if (!localDepartment) {\n        localDepartment = await this.ctx.model.department.get({ departmentId: department.departmentId });\n        if (!localDepartment) {\n          this.ctx.throw(1004, department.departmentId);\n        }\n      }\n      // delete role\n      await this.ctx.meta.role.delete({ roleId: localDepartment.roleId, force: true });\n      // delete department\n      await this.ctx.model.department.delete({ id: localDepartment.id });\n    }\n\n    async _deleteUserAndMember({ localMember, member }) {\n      // localMember\n      if (!localMember) {\n        localMember = await this.ctx.model.member.get({ memberId: member.memberId });\n        if (!localMember) {\n          this.ctx.throw(1005, member.memberId);\n        }\n      }\n      const userId = localMember.userId;\n      // delete user: including roles/auth\n      await this.ctx.meta.user.delete({ userId });\n      // delete member\n      await this.ctx.model.member.delete({ id: localMember.id });\n    }\n\n    async _updateRoleAndDepartment({ localDepartment, department }) {\n      // localDepartment\n      if (!localDepartment) {\n        localDepartment = await this.ctx.model.department.get({ departmentId: department.departmentId });\n        if (!localDepartment) {\n          this.ctx.throw(1004, department.departmentId);\n        }\n      }\n      // update role name\n      if (department.departmentName) {\n        await this.ctx.meta.role.save({\n          roleId: localDepartment.roleId,\n          data: { roleName: department.departmentName },\n        });\n      }\n      // update department\n      department.id = localDepartment.id;\n      await this.ctx.model.department.update(department);\n    }\n\n    async _updateUserRoles({ userId, departmentIdsOld, departmentIdsNew }) {\n      const departmentIdsAdd = [];\n      const departmentIdsDelete = [];\n      for (const departmentId of departmentIdsNew) {\n        if (departmentIdsOld.indexOf(departmentId) === -1) {\n          departmentIdsAdd.push(departmentId);\n        }\n      }\n      for (const departmentId of departmentIdsOld) {\n        if (departmentIdsNew.indexOf(departmentId) === -1) {\n          departmentIdsDelete.push(departmentId);\n        }\n      }\n      // add\n      await this._addUserRoles({ userId, departmentIds: departmentIdsAdd });\n      // delete\n      await this._deleteUserRoles({ userId, departmentIds: departmentIdsDelete });\n    }\n\n    async _updateUserAndMember({ localMember, member }) {\n      // localMember\n      if (!localMember) {\n        localMember = await this.ctx.model.member.get({ memberId: member.memberId });\n        if (!localMember) {\n          this.ctx.throw(1005, member.memberId);\n        }\n      }\n      const userId = localMember.userId;\n      // roles\n      if (member.department !== undefined && member.department !== localMember.department) {\n        await this._updateUserRoles({\n          userId,\n          departmentIdsOld: (localMember.department || '').split(','),\n          departmentIdsNew: (member.department || '').split(','),\n        });\n      }\n      // status\n      if (member.status !== undefined && member.status !== localMember.status) {\n        await this.ctx.meta.user.disable({ userId, disabled: member.status !== 1 });\n      }\n      // update member\n      member.id = localMember.id;\n      await this.ctx.model.member.update(member);\n    }\n\n    async _createRoleAndDepartment({ department }) {\n      // get parent role\n      const roleParent = await this._getRoleOfDepartment({ departmentId: department.departmentParentId });\n      if (!roleParent) {\n        this.ctx.throw(1003, department.departmentParentId);\n      }\n      // create current role\n      const roleIdCurrent = await this.ctx.meta.role.add({\n        roleName: department.departmentName,\n        catalog: 0, // update by sub role\n        sorting: department.departmentOrder,\n        roleIdParent: roleParent.id,\n      });\n        // force change parent role to catalog=1\n      await this.ctx.meta.role.save({\n        roleId: roleParent.id,\n        data: { catalog: 1 },\n      });\n      // creat department\n      department.roleId = roleIdCurrent;\n      const res = await this.ctx.model.department.insert(department);\n      return res.insertId;\n    }\n\n    // [1,2]\n    async _addUserRoles({ userId, departmentIds }) {\n      for (const departmentId of departmentIds) {\n        // get role of department\n        const roleCurrent = await this._getRoleOfDepartment({ departmentId });\n        if (!roleCurrent) {\n          this.ctx.throw(1003, departmentId);\n        }\n        // add user role\n        await this.ctx.meta.role.addUserRole({ userId, roleId: roleCurrent.id });\n      }\n    }\n\n    async _deleteUserRoles({ userId, departmentIds }) {\n      for (const departmentId of departmentIds) {\n        // get role of department\n        const roleCurrent = await this._getRoleOfDepartment({ departmentId });\n        if (!roleCurrent) {\n          this.ctx.throw(1003, departmentId);\n        }\n        // add user role\n        await this.ctx.meta.role.deleteUserRole({ userId, roleId: roleCurrent.id });\n      }\n    }\n\n    async _createUserAndMember({ member }) {\n      // 1. create user&auth\n      // verify auth user\n      const wxworkHelper = new (WxworkHelperFn(this.ctx))();\n      const verifyUser = await wxworkHelper.verifyAuthUser({ scene: 'wxwork', member, needLogin: false });\n      const userId = verifyUser.agent.id;\n\n      // 2. add user to role\n      if (member.department) {\n        await this._addUserRoles({ userId, departmentIds: member.department.split(',') });\n        // delete role:activated (need not)\n      }\n\n      // 3. status\n      if (member.status !== 1) {\n        await this.ctx.meta.user.disable({ userId, disabled: true });\n      }\n\n      // 4. create member\n      member.userId = userId;\n      const res = await this.ctx.model.member.insert(member);\n      return res.insertId;\n    }\n\n    // not create new role here\n    async _getRoleOfDepartment({ departmentId }) {\n      // role top\n      if (departmentId === 0) {\n        return await this._getRoleTop();\n      }\n      // department\n      const department = await this.ctx.model.department.get({ departmentId });\n      if (!department) return null;\n      return await this.ctx.meta.role.get({ id: department.roleId });\n    }\n\n    // get role top\n    async _getRoleTop() {\n      const roleContainer = await this.ctx.meta.role.get({ roleName: this.ctx.config.sync.department.roleContainer });\n      const roleTop = await this.ctx.meta.role.get({ roleName: this.ctx.config.sync.department.roleTop, roleIdParent: roleContainer.id });\n      if (roleTop) return roleTop;\n      // create role\n      const data = {\n        roleName: this.ctx.config.sync.department.roleTop,\n        catalog: 1,\n        sorting: 0,\n        roleIdParent: roleContainer.id,\n      };\n      data.id = await this.ctx.meta.role.add(data);\n      return data;\n    }\n\n    _adjustFields(itemDest, itemSrc, fieldMap) {\n      for (const index in fieldMap[1]) {\n        const field = fieldMap[1][index];\n        if (itemSrc[field] !== undefined) {\n          const fieldDest = fieldMap[0][index];\n          itemDest[fieldDest] = this._adjustFieldType(itemSrc[field], fieldMap[2][index]);\n        }\n      }\n    }\n    _adjustFieldType(value, type) {\n      if (type === 'number') return Number(value);\n      else if (type === 'string') return String(value);\n      else if (type === 'array') return value.join(',');\n      else if (type === 'json') return JSON.stringify(value);\n      return value;\n    }\n\n  }\n\n  return Contacts;\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nmodule.exports = app => {\n\n  class Event extends app.Service {\n\n    async loginInfo({ /* event,*/ data }) {\n      const info = data.info;\n      const provider = info.user && info.user.provider;\n      if (provider && provider.module === 'a-wxwork') {\n        info.config = extend(true, info.config, {\n          modules: {\n            'a-base': {\n              account: {\n                needActivation: false,\n              },\n            },\n          },\n        });\n      }\n    }\n\n  }\n\n  return Event;\n};\n","module.exports = app => {\n\n  class JSSDK extends app.Service {\n\n    async jsconfig({ url }) {\n      // config\n      const config = this.ctx.config.account.wxwork;\n      const configAppSelfBuilt = config.apps.selfBuilt;\n      // params\n      const params = {\n        debug: configAppSelfBuilt.jssdk.debug,\n        jsApiList: configAppSelfBuilt.jssdk.jsApiList,\n        url,\n      };\n      return await this.ctx.meta.wxwork.app.selfBuilt.getJsConfig(params);\n    }\n\n    async jsconfigAgent({ url }) {\n      // config\n      const config = this.ctx.config.account.wxwork;\n      const configAppSelfBuilt = config.apps.selfBuilt;\n      // params\n      const params = {\n        agentid: configAppSelfBuilt.agentid,\n        jsApiList: configAppSelfBuilt.jssdkAgent.jsApiList,\n        url,\n      };\n      return await this.ctx.meta.wxwork.app.selfBuilt.getJsConfigAgent(params);\n    }\n\n  }\n\n  return JSSDK;\n};\n","const WxworkHelperFn = require('../common/wxworkHelper.js');\n\nmodule.exports = app => {\n\n  class AuthMini extends app.Service {\n\n    async login({ scene, code }) {\n      if (!code) return this.ctx.throw(403);\n      const res = await this.ctx.meta.wxwork.app.mini[scene].code2Session(code);\n      // const res = { errcode: 0, userid: 'YangJian1', session_key: 'kJtdi6RF+Dv67QkbLlPGjw==' };\n      if (res.errcode) throw new Error(res.errmsg);\n      const session_key = res.session_key;\n      const memberId = res.userid;\n      // verify\n      const wxworkHelper = new (WxworkHelperFn(this.ctx))();\n      await wxworkHelper.verifyAuthUser({ scene: `wxworkmini${scene}`, memberId });\n      // save session_key, because ctx.user maybe changed\n      await this.ctx.meta.wxwork.mini[scene].saveSessionKey(session_key);\n      // echo\n      return await this.ctx.meta.auth.echo();\n    }\n\n  }\n\n  return AuthMini;\n};\n","const department = require('./model/department.js');\nconst member = require('./model/member.js');\n\nmodule.exports = app => {\n  const models = {\n    department,\n    member,\n  };\n  return models;\n};\n","module.exports = app => {\n  class Department extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aWxworkDepartment', options: { disableDeleted: true } });\n    }\n  }\n  return Department;\n};\n","module.exports = app => {\n  class Member extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aWxworkMember', options: { disableDeleted: false } });\n    }\n  }\n  return Member;\n};\n","const authFn = require('./passport/auth.js');\n\nmodule.exports = app => {\n  // const schemas = require('./config/validation/schemas.js')(app);\n  // socketio\n  const socketioMessageProgress = require('./config/socketio/messageProgress.js')(app);\n  const socketioChannelApp = require('./config/socketio/channelApp.js')(app);\n  const meta = {\n    base: {\n      atoms: {\n      },\n      functions: {\n        contacts: {\n          title: 'Contacts Management',\n          actionPath: 'contacts/management',\n          sorting: 1,\n          menu: 0,\n        },\n      },\n    },\n    validation: {\n      validators: {\n      },\n      keywords: {},\n      schemas: {\n      },\n    },\n    settings: {\n      instance: {\n        actionPath: 'settings/list',\n      },\n    },\n    event: {\n      declarations: {\n        wxworkMessage: 'Wechat Work Message',\n      },\n      implementations: {\n        'a-base:loginInfo': 'event/loginInfo',\n      },\n    },\n    index: {\n      indexes: {\n        aWxworkDepartment: 'createdAt,updatedAt,roleId,departmentId,departmentParentId',\n        aWxworkMember: 'createdAt,updatedAt,userId,memberId',\n      },\n    },\n    socketio: {\n      messages: {\n        progress: socketioMessageProgress,\n      },\n      channels: {\n        app: socketioChannelApp,\n      },\n    },\n    auth: authFn,\n  };\n  return meta;\n};\n","const strategy = require('./strategy-wxwork.js');\nconst WxworkHelperFn = require('../common/wxworkHelper.js');\nconst authProviderScenes = require('../common/authProviderScenes.js');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n\n  function _createProvider(sceneInfo) {\n    return {\n      meta: {\n        title: sceneInfo.title,\n        mode: 'redirect',\n        disableAssociate: true,\n        component: `button${sceneInfo.authProvider}`,\n      },\n      config: {\n        corpid: '',\n        agentid: '',\n        client: sceneInfo.client,\n        scope: 'snsapi_base',\n      },\n      configFunctions: {\n        getConfig(ctx) {\n          const config = ctx.config.module(moduleInfo.relativeName).account.wxwork;\n          return { corpid: config.corpid, agentid: config.apps.selfBuilt.agentid };\n        },\n      },\n      handler: app => {\n        return {\n          strategy,\n          callback: (req, code, done) => {\n            // ctx/state\n            const ctx = req.ctx;\n            const state = ctx.request.query.state || 'login';\n            // code/memberId\n            const wxworkHelper = new (WxworkHelperFn(ctx))();\n            const api = wxworkHelper.createWxworkApi();\n            api.app.selfBuilt.getUserIdByCode(code).then(res => {\n              if (res.errcode) throw new Error(res.errmsg);\n              const memberId = res.UserId;\n              wxworkHelper.verifyAuthUser({\n                scene: sceneInfo.scene,\n                memberId,\n                state,\n                cbVerify: (profileUser, cb) => {\n                  app.passport.doVerify(req, profileUser, cb);\n                },\n              }).then(verifyUser => { done(null, verifyUser); }).catch(done);\n            }).catch(done);\n          },\n        };\n      },\n    };\n  }\n\n  function _createProviderMini(sceneInfo) {\n    return {\n      meta: {\n        title: sceneInfo.title,\n        mode: 'direct',\n        disableAssociate: true,\n      },\n      config: {\n      },\n      handler: null,\n    };\n  }\n\n  const metaAuth = {\n    providers: {\n    },\n  };\n\n  // wxwork/wxworkweb\n  for (const scene of [ 'wxwork', 'wxworkweb' ]) {\n    const sceneInfo = authProviderScenes.getScene(scene);\n    metaAuth.providers[sceneInfo.authProvider] = _createProvider(sceneInfo);\n  }\n\n  // minis\n  const moduleConfig = app.meta.configs[moduleInfo.relativeName];\n  const minis = moduleConfig.account.wxwork.minis;\n  for (const sceneShort in minis) {\n    const scene = `wxworkmini${sceneShort}`;\n    const sceneInfo = authProviderScenes.getScene(scene);\n    metaAuth.providers[sceneInfo.authProvider] = _createProviderMini(sceneInfo);\n  }\n\n  // ok\n  return metaAuth;\n};\n","const require3 = require('require3');\nconst util = require3('util');\nconst passport = require3('passport-strategy');\nconst OAuth = require('./oauth.js');\n\nconst __OAUTH = Symbol('WXWORK#__OAUTH');\n\nfunction WxworkStrategy(options, verify) {\n  options = options || {};\n\n  if (!verify) {\n    throw new TypeError('WxworkStrategy required a verify callback');\n  }\n\n  if (typeof verify !== 'function') {\n    throw new TypeError('_verify must be function');\n  }\n\n  passport.Strategy.call(this, options, verify);\n\n  this.name = options.name || 'wxwork';\n  this._client = options.client || 'wxwork';\n  this._verify = verify;\n  this._callbackURL = options.callbackURL;\n  this._lang = options.lang || 'en';\n  this._state = options.state;\n  this._scope = options.scope || 'snsapi_base';\n  this._passReqToCallback = options.passReqToCallback;\n\n}\n\nutil.inherits(WxworkStrategy, passport.Strategy);\n\nWxworkStrategy.prototype.getOAuth = function(options) {\n  if (this[__OAUTH] === undefined) {\n    let corpid = options.corpid;\n    let agentid = options.agentid;\n    if (!corpid || !agentid) {\n      const _config = options.getConfig();\n      corpid = _config.corpid;\n      agentid = _config.agentid;\n    }\n    this[__OAUTH] = new OAuth(corpid, agentid);\n  }\n  return this[__OAUTH];\n};\n\nWxworkStrategy.prototype.authenticate = function(req, options) {\n\n  if (!req._passport) {\n    return this.error(new Error('passport.initialize() middleware not in use'));\n  }\n\n  const self = this;\n\n  options = options || {};\n\n  // oauth\n  const _oauth = this.getOAuth(options);\n\n  // 校验完成信息\n  function verified(err, user, info) {\n    if (err) {\n      return self.error(err);\n    }\n    if (!user) {\n      return self.fail(info);\n    }\n    self.success(user, info);\n  }\n\n  // 获取code授权成功\n  if (req.url.indexOf('/callback') > -1) {\n\n    // 获取code,并校验相关参数的合法性\n    // No code only state --> User has rejected send details. (Fail authentication request).\n    if (req.query && req.query.state && !req.query.code) {\n      return self.fail(401);\n    }\n\n    // Documentation states that if user rejects userinfo only state will be sent without code\n    // In reality code equals \"authdeny\". Handle this case like the case above. (Fail authentication request).\n    if (req.query && req.query.code === 'authdeny') {\n      return self.fail(401);\n    }\n\n    const code = req.query.code;\n\n    try {\n      if (self._passReqToCallback) {\n        self._verify(req, code, verified);\n      } else {\n        self._verify(code, verified);\n      }\n    } catch (ex) {\n      return self.error(ex);\n    }\n\n  } else {\n    const state = options.state || self._state;\n    const callbackURL = options.callbackURL || self._callbackURL;\n    const scope = options.scope || self._scope;\n\n    const methodName = (this._client === 'wxwork') ? 'getAuthorizeURL' : 'getAuthorizeURLForWebsite';\n    const location = _oauth[methodName](callbackURL, state, scope);\n\n    self.redirect(location, 302);\n  }\n};\n\nmodule.exports = WxworkStrategy;\n","const require3 = require('require3');\nconst querystring = require3('querystring');\n\nconst OAuth = function(appid, agentid) {\n  this.appid = appid;\n  this.agentid = agentid;\n};\n\nOAuth.prototype.getAuthorizeURL = function(redirect, state, scope) {\n  const url = 'https://open.weixin.qq.com/connect/oauth2/authorize';\n  const info = {\n    appid: this.appid,\n    redirect_uri: redirect,\n    response_type: 'code',\n    scope: scope || 'snsapi_base',\n    state: state || '',\n  };\n\n  return url + '?' + querystring.stringify(info) + '#wechat_redirect';\n};\n\nOAuth.prototype.getAuthorizeURLForWebsite = function(redirect, state) {\n  const url = 'https://open.work.weixin.qq.com/wwopen/sso/qrConnect';\n  const info = {\n    appid: this.appid,\n    agentid: this.agentid,\n    redirect_uri: redirect,\n    state: state || '',\n  };\n\n  return url + '?' + querystring.stringify(info);\n};\n\nmodule.exports = OAuth;\n","module.exports = app => {\n  const progress = {\n    info: {\n      title: 'Progress',\n      persistence: true,\n    },\n    callbacks: {\n    },\n  };\n  return progress;\n};\n","const WxworkHelperFn = require('../../common/wxworkHelper.js');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  async function onPush({ ctx, content }) {\n    // userIds / roleIds\n    const userIds = content.userIds;\n    const roleIds = content.roleIds;\n    // message\n    const message = {\n      ... content.data,\n    };\n    // agentid\n    const config = ctx.config.module(moduleInfo.relativeName).account.wxwork;\n    message.agentid = config.apps.selfBuilt.agentid;\n    // userIds\n    if (userIds && userIds.length > 0) {\n      const modelMember = ctx.model.module(moduleInfo.relativeName).member;\n      const list = await modelMember.select({\n        where: { userId: userIds },\n        columns: [ 'memberId' ],\n      });\n      message.touser = list.map(item => item.memberId).join('|');\n    }\n    // roleIds\n    if (roleIds && roleIds.length > 0) {\n      const modelDepartment = ctx.model.module(moduleInfo.relativeName).department;\n      const list = await modelDepartment.select({\n        where: { roleId: roleIds },\n        columns: [ 'departmentId' ],\n      });\n      message.toparty = list.map(item => item.departmentId).join('|');\n    }\n    // send\n    const wxworkHelper = new (WxworkHelperFn(ctx))();\n    const api = wxworkHelper.createWxworkApi();\n    await api.app.selfBuilt.sendMessage(message);\n    // done\n    return true;\n  }\n\n  const ChannelApp = {\n    info: {\n      title: 'App Message',\n    },\n    callbacks: {\n      onPush,\n    },\n  };\n  return ChannelApp;\n};\n"],"sourceRoot":""}